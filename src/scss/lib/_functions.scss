@use "sass:meta";
@use "sass:string";
@use 'sass:math';

// Замена подстроки в строке
@function str-replace($string, $search, $replace: '') {
	$index: string.index($string, $search);
	@if $index {
		@return string.slice($string, 1, $index - 1) + $replace +
		str-replace(string.slice($string, $index +
		string.length($search)), $search, $replace);
	}
	@return $string;
}

// Убрать все пробелы из строки
@function str-remove-whitespace($str) {
	@while (string.index($str, ' ') != null) {
		$index: string.index($str, ' ');
		$str: "#{string.slice($str, 0, $index - 1)}#{string.slice($str, $index + 1)}";
	}
	@return $str;
}

// сбросить размерность у чисел
@function num($number) {
	@if meta.type-of($number) == 'number' and not math.is-unitless($number) {
		@return math.div($number, ($number * 0 + 1));
	}

	@return $number;
}

// оптимизировать url для svg
@function svg-url($svg) {
	$encoded:'';
	$slice: 2000;
	$index: 0;
	$loops: math.ceil(math.div(string.length($svg), $slice));
	@for $i from 1 through $loops {
		$chunk: string.slice($svg, $index, $index + $slice - 1);
		$chunk: str-replace($chunk,'"','\'');
		$chunk: str-replace($chunk,'<','%3C');
		$chunk: str-replace($chunk,'>','%3E');
		$chunk: str-replace($chunk,'&','%26');
		$chunk: str-replace($chunk,'#','%23');
		$chunk: str-replace($chunk,'{','%7B');
		$chunk: str-replace($chunk,'}','%7D');
		$encoded: #{$encoded}#{$chunk};
		$index: $index + $slice;
	}
	@return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}

// плавное изменение размера на заданном диапазоне ширины экрана (без медиазапросов, через clamp)
@function fluid($max, $min, $maxWidth: 1440, $minWidth: 480) {
	$slope: math.div(num($max - $min), num($maxWidth - $minWidth));
	$yAxisIntersection: -$minWidth * $slope + $min;

	@return clamp(#{$min}, #{$yAxisIntersection} + #{$slope * 100vw}, #{$max});
}

// плавное изменение размера на заданном диапазоне ширины экрана (без медиазапросов, через clamp с преобразованием в rem)
@function fluid-rem($max: 100, $min: 10, $maxViewportWidth: 1440, $minViewportWidth: 480) {
	$maxSize: math.div($max, 16);
	$minSize: math.div($min, 16);
	$maxWidth: math.div($maxViewportWidth, 16);
	$minWidth: math.div($minViewportWidth, 16);
  
	$slope: math.div(($maxSize - $minSize), ($maxWidth - $minWidth));
	$yAxisIntersection: -$minWidth * $slope + $minSize;
  
	@return clamp(
		#{$minSize * 1rem},
		#{$yAxisIntersection * 1rem} + #{$slope * 100vw},
		#{$maxSize * 1rem}
	);
}

// преобразование пикселей в rem
@function rem($pixel) {
	@if math.is-unitless($pixel) {
		@return math.div($pixel, 16) + rem;
	}
}